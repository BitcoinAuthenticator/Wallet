package authenticator.protobuf;

option java_outer_classname="ProtoConfig";

enum ATOperationType {
    Pairing 							= 0;
	Unpair 								= 1;
	SignTx 								= 2;
	updateIpAddressesForPreviousMessage = 3;
}

message ActiveAccount{
	enum ActiveAccountType {
	    Normal	 		= 0;
		Authenticator 	= 1;
	}
	
	optional PairedAuthenticator pairedAuthenticator = 1;
	required ActiveAccountType activeAccountType 	 = 2;
}

//
//	Pairing Data
//
message PairedAuthenticator{
	message KeysObject{
		required string priv_key 	= 1;
		required string address 	= 2;
		required int32 	index 		= 3;
	}
	
	required string 	aes_key 			= 1;
	required string 	master_public_key 	= 2;
	required string 	chain_code 			= 3;
	required string 	GCM 				= 4;
	required string 	pairingID 			= 5;
	required bool 		testnet 			= 6;
	required int32 		keys_n 				= 7;
	repeated KeysObject generatedKeys 		= 8;
	required string 	pairingName 		= 9;
}

//
//	Pending Requests Data
//

message PendingRequest{
	
  	message Contract{
  		optional bool ShouldSendPayloadOnConnection 									= 1;
  		optional bool ShouldReceivePayloadAfterSendingPayloadOnConnection 		 		= 2;
  	}

	required string pairingID 									= 1;
	required string requestID 									= 2;
	required ATOperationType operationType					 	= 3;
	optional string rawTx 										= 4;
	optional string payloadIncoming 							= 5;
	optional string payloadToSendInCaseOfConnection 			= 6;
	required Contract contract 									= 7;
}

message ConfigAuthenticatorWallet {

  	optional bool paired = 1;  // Whether or not the wallet is paired. This will be set to repeated when multi-account is finished.
	
	repeated PairedAuthenticator pairedWallets = 2; 
	repeated PendingRequest pendingRequests 	= 3; 
}

message ConfigReceiveAddresses {

	repeated string walletKey = 1; // An array of (min 10) hex encoded public keys from the wallet that will be loaded in the receive pane.
	repeated string authKey = 2; // Same thing but generated from the Authenticator mpubkey. Used when paired.

}

message ConfigAddressBook {

	optional string address = 1; // This is a placeholder for the address book.

}

message ConfigSettings {

	optional string onename = 1; // The user's OneName ID. Used for getting the avatar on start up.

}

